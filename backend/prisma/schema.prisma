generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String?
  name             String?
  avatarUrl        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  analyses         Analysis[]
  jobDescs         JobDescription[]
  resumes          Resume[]

  @@map("users")
}

model Resume {
  id        String     @id @default(uuid())
  title     String
  type      String
  content   Json
  fileName  String?
  filePath  String?
  fileSize  Int?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  analyses  Analysis[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model JobDescription {
  id          String     @id @default(uuid())
  title       String
  description String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  analyses    Analysis[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_descriptions")
}

model Analysis {
  id               String         @id @default(uuid())
  overallScore     Float
  keywordMatch     Float
  skillsMatch      Float
  experienceMatch  Float
  formatScore      Float
  strengths        String[]
  improvements     String[]
  missingKeywords  String[]
  keywordData      Json
  detailedAnalysis Json?
  recommendations  Json?
  aiResponse       Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  resumeId         String
  jobDescId        String
  jobTitle         String?
  jobDescription   JobDescription @relation(fields: [jobDescId], references: [id], onDelete: Cascade)
  resume           Resume         @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}
